\NeedsTeXFormat{LaTeX2e}[2023/06/01]

\ProvidesPackage{lpil}[2023/07/27 Literate Programming in LaTeX]

\RequirePackage{ifthen}
\RequirePackage{amsfonts}
\RequirePackage{amsmath}
\RequirePackage{amsthm}
\RequirePackage{makeidx}
\RequirePackage{verbatim}
\RequirePackage{fancyvrb}
\RequirePackage{color}
\RequirePackage{graphicx}

\newtheorem{definition}{Definition}

\newcommand{\stbFam}[1]{\ensuremath{\mathcal #1}}
\newcommand{\config}[1]{\ensuremath{\mathcal C(#1)}}
\newcommand{\TODO}[1]{\bf TODO: #1}
\newcommand{\define}[2]{{\bf #2}\index{#1|textbf}}
\newcommand{\tuple}[1]{\ensuremath{(#1)}}
\newcommand{\set}[1]{\ensuremath{\{#1\}}}
\newcommand{\suchThat}{\ensuremath{|}}
\newcommand{\union}{\ensuremath{\cup}}

\directlua{lpil = require("lpil")}
\directlua{lpil.initialize()}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% track the document structure the LPiL way
\newcommand{\lpilStoreSection}[2]{
  \def\lpilSection{#1}\def\lpilLabel{#2}
}
\newcommand{\doLpilSection}[2][]{
  \typeout{\lpilSection - \lpilLabel - #1 - #2}
  \ifthenelse{\equal{#1}{}}{
    \ifthenelse{\equal{\lpilSection}{title}}{
      \title{#2}\label{\lpilLabel}
      \def\lpilShortTitle{#2}
    }{
      \csname \lpilSection \endcsname {#2}\label{\lpilLabel}
    }
  }{
    \ifthenelse{\equal{\lpilSection}{title}}{
      \title{#2}\label{\lpilLabel}
      \def\lpilShortTitle{#1}
    }{
      \csname \lpilSection \endcsname [#1]{#2}\label{\lpilLabel}
    }
  }
}
\newcommand{\lpilTitle}[1]{\lpilStoreSection{title}{#1}\doLpilSection}
\newcommand{\lpilPart}[1]{\lpilStoreSection{part}{#1}\doLpilSection}
\newcommand{\lpilChapter}[1]{\lpilStoreSection{chapter}{#1}\doLpilSection}
\newcommand{\lpilSubSection}[1]{\lpilStoreSection{subsection}{#1}\doLpilSection}
\newcommand{\lpilSubSubSection}[1]{\lpilStoreSection{subsubsection}{#1}\doLpilSection}
\newcommand{\lpilParagraph}[1]{\lpilStoreSection{paragraph}{#1}\doLpilSection}
\newcommand{\lpilSubParagraph}[1]{\lpilStoreSection{subparagraph}{#1}\doLpilSection}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% include LPiL metafun based graphics

\newcommand{\includeLpilDiagram}[1]{\includegraphics{\latexBuildDir/#1_v1_5}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Track the input files (using Lua to provide an "input file" stack)

\newcommand{\pushInputFile}[1]{\directlua{lpil.pushInputFile('#1')}}
\newcommand{\popInputFile}{\directlua{lpil.popInputFile()}}
\newcommand{\currentInputFile}{\directlua{lpil.currentInputFile()}}

\let\origInput=\input
\def\input#1{\pushInputFile{#1}\origInput{#1}\popInputFile}

\let\origInclude=\include
\def\include#1{\def\pushInputFile{#1}\origInclude{#1}\popInputFile}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\newCodeType}[2]{\directlua{lpil.newCodeType('#1','#2')}}

\newenvironment{lpilBuild}[2]{
We describe how to build {#1} using {#2}
\par
\begin{tabular}{ c c c }
someThing & some thing & some thing else \\
}{
\end{tabular}
\par
This concludes the description.
}

\newcommand{\lpilRequires}[2]{requires&#1&#2\\}
\newcommand{\lpilCreates}[2]{creates&#1&#2\\}

%see https://tex.stackexchange.com/questions/98203/can-i-test-if-a-file-exists
%\IfFileExists{filename}{true-branch}{false-branch}

\endinput
